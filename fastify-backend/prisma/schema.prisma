// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String  @id @default(uuid())
  email   String  @unique
  name    String?
  photo   Image?  @relation(fields: [imageId], references: [id])
  imageId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  onboardingCompleted Boolean @default(false)

  signInPasscodes SigInPasscode[]
  sessions        Session[]

  friendships1 Friendship[] @relation("friendship-1")
  friendships2 Friendship[] @relation("friendship-2")

  friendshipRequestsFrom FriendshipRequest[] @relation("friendship-requests-from")
  friendshipRequestsTo   FriendshipRequest[] @relation("friendship-requests-to")

  messages           Message[]
  conversationGroups ConversationGroup[]
  messageReactions   MessageReaction[]
}

model SigInPasscode {
  id        String   @id @default(uuid())
  value     Int
  expiresAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Image {
  id   String @id @default(uuid())
  name String
  type String
  data Bytes

  users User[]
}

model FriendshipRequest {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  status String @default("pending") // pending | accepted | rejected

  fromUser   User   @relation(fields: [fromUserId], references: [id], name: "friendship-requests-from")
  fromUserId String

  toUser   User   @relation(fields: [toUserId], references: [id], name: "friendship-requests-to")
  toUserId String

  @@unique([fromUserId, toUserId])
}

model Friendship {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1   User   @relation(fields: [user1Id], references: [id], name: "friendship-1")
  user1Id String

  user2   User   @relation(fields: [user2Id], references: [id], name: "friendship-2")
  user2Id String

  conversation Conversation?
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  conversationGroup   ConversationGroup? @relation(fields: [conversationGroupId], references: [id])
  conversationGroupId String?

  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?

  reactions MessageReaction[]
}

model Conversation {
  id String @id @default(uuid())

  friendship   Friendship @relation(fields: [friendshipId], references: [id])
  friendshipId String     @unique

  messages Message[]
}

model ConversationGroup {
  id String @id @default(uuid())

  users    User[]
  messages Message[]
}

model MessageReaction {
  id String @id @default(uuid())

  message   Message @relation(fields: [messageId], references: [id])
  messageId String

  unicode String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([messageId, userId, unicode])
}
